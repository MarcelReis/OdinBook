type User {
  id: ID!
  username: String!
  firstname: String!
  surname: String!

  thumb: String
  email: String
  connections: [UserConnection!]
}

input CreateUserInput {
  username: String!
  firstname: String!
  surname: String!
}

enum ConnectionStatus {
  PENDING
  WAITING
  CONNECTED
  BLOCKED
}

type UserConnection {
  id: ID!
  user: User!
  createdAt: String!
  acceptedAt: String
  status: ConnectionStatus
}

type Mutation {
  createUser(input: CreateUserInput!): User!

  createUserConnection(username: String!): User!
  updateUserConnection(username: String!, status: ConnectionStatus!): User!
  removeUserConnection(username: String!): User!
}

type Query {
  user(username: String): User!
  users: [User!]!
  hello: String!
}

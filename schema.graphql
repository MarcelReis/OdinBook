interface User {
  id: ID!
  username: String!
  firstname: String!
  surname: String!
  thumb: String
}

type User_Basic implements User {
  id: ID!
  username: String!
  firstname: String!
  surname: String!
  thumb: String
}

type User_Full implements User {
  id: ID!
  username: String!
  name: String!
  firstname: String!
  surname: String!
  thumb: String
  email: String!

  connections: [FriendConnection!]!
}

input CreateUserInput {
  username: String!
  firstname: String!
  surname: String!
}

enum ConnectionStatus {
  PENDING
  WAITING
  CONNECTED
  BLOCKED
}

input CreateFriendConnectionInput {
  username: String!
}

input UpdateFriendConnectionInput {
  id: String!
  accept: Boolean!
}

type FriendConnection {
  id: ID!
  user: User_Basic!
  createdAt: String!
  acceptedAt: String
  status: ConnectionStatus
}

type Mutation {
  createUser(input: CreateUserInput!): User_Full!

  createFriendConnection(input: CreateFriendConnectionInput!): User_Full!
  updateFriendConnection(input: UpdateFriendConnectionInput!): User_Full!
}

type Query {
  user(username: String): User_Full!
  users: [User_Basic!]!
  hello: String!
}
